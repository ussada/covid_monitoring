{"version":3,"sources":["util/util.js","constants.js","util/date.js","util/api.js","pages/home/styles.js","pages/home/animate.js","pages/home/chart.js","pages/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["sortData","fields","sortType","a","b","sort","name","DateUtil","isDate","result","Array","isArray","map","toNumber","value","Number","isNaN","formatCurrency","x","decimal","toFixed","replace","DATE_FORMAT","DATE_FORMAT_DATA","END_POINTS","format","moment","ISO_8601","isValid","dateToString","date","stringToDate","dateString","toDate","curDate","dateAdd","n","type","add","useAPI","method","url","params","param","queryParam","bodyParam","pathParam","Object","keys","join","fetchOption","headers","Headers","JSON","stringify","useState","loading","data","error","setResult","refresh","setRefresh","useEffect","fetch","then","res","ok","status","json","success","errorMsg","statusText","Error","catch","refreshData","Container","styled","div","ChartContainer","Chart","props","width","color","ChartLabel","calculateBoundingBoxes","children","boundingBoxes","React","Children","forEach","child","domNode","ref","current","nodeBoundingBox","getBoundingClientRect","undefined","key","AnimateElements","options","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","useRef","usePrevious","motionDelay","newBoundingBox","length","firstBox","lastBox","changeInY","top","requestAnimationFrame","style","transform","transition","Util","AnimateChart","startDate","endDate","interval","limit","conditions","setConditions","handleChange","target","showDate","setShowDate","displayData","item","id","country","cases","slice","maxWidth","timer","setTimer","repeat","setRepeat","tick","setInterval","d","nextDate","clearInterval","animateOptions","htmlFor","onChange","marginLeft","checked","percentage","createRef","API","randomColor","brightness","rgb","Math","random","mix","mixedrgb","round","Home","lastdays","historyData","refreshHistory","setDisplayData","search","useMemo","datas","idx","timeline","days","s","onKeyPress","e","charCode","preventDefault","onClick","cursor","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15132e08.chunk.js","sourcesContent":["import {DateUtil} from './';\r\n\r\nconst sortData = (fields, sortType = 'asc') => {\r\n    return (a, b) => {\r\n        const sort = name => {\r\n            if (typeof a === 'object' && !DateUtil.isDate(a)) {\r\n                if (a[name] < b[name])\r\n                return -1;\r\n\r\n            if (a[name] > b[name])\r\n                return 1;\r\n            }\r\n            else {\r\n                if (a < b)\r\n                    return -1;\r\n                \r\n                if (a > b)\r\n                    return 1;\r\n            }\r\n        }\r\n\r\n        let result = 0;\r\n        \r\n        if (Array.isArray(fields)) {\r\n            fields.map(name => result = sort(name));\r\n        }\r\n        else if (typeof fields === 'string')\r\n            result = sort(fields);\r\n        \r\n        return sortType === 'asc' ? result : -result;\r\n    }\r\n}\r\n\r\nconst toNumber = value => {\r\n    switch(typeof value) {\r\n        case 'string':\r\n            return Number.isNaN(Number(value)) ? value : Number(value);\r\n  \r\n        default :\r\n            return value;\r\n    }\r\n}\r\n\r\nconst formatCurrency = (x, decimal = 2) => {\r\n    if(isNaN(x))\r\n      x = 0;\r\n    \r\n    const value = toNumber(x);\r\n    return value.toFixed(decimal).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nexport {\r\n    sortData,\r\n    toNumber,\r\n    formatCurrency\r\n}","export const DATE_FORMAT = 'DD/MM/YYYY';\r\nexport const DATE_FORMAT_DATA = 'M/D/YY';\r\n\r\nexport const END_POINTS = {\r\n    HISTORY: 'https://disease.sh/v3/covid-19/historical'\r\n}","import moment from 'moment';\r\nimport {DATE_FORMAT} from '../constants';\r\n\r\nconst isDate = (value) => {\r\n    const format = [\r\n      moment.ISO_8601,\r\n      DATE_FORMAT\r\n    ]\r\n  \r\n    return moment(value, format, true).isValid();\r\n  }\r\n\r\nconst dateToString = (date, format = DATE_FORMAT) => {\r\n    if (isDate(date))\r\n      return moment(date).format(format);\r\n    else\r\n      return date;\r\n}\r\n\r\nconst stringToDate = (dateString, format = DATE_FORMAT) => {\r\n  return moment(dateString, format).toDate();\r\n}\r\n\r\nconst curDate = () => {\r\n  return moment().toDate();\r\n}\r\n\r\nconst dateAdd = (date, n, type = 'days') => {\r\n  return moment(date).add(n, type).toDate();\r\n}\r\n\r\nexport {\r\n  isDate,\r\n  dateToString,\r\n  stringToDate,\r\n  curDate,\r\n  dateAdd\r\n}","import {useState, useEffect} from 'react';\r\nimport {DateUtil} from './';\r\n\r\nconst {isDate, dateToString} = DateUtil;\r\n\r\nconst queryParamParser = param => {\r\n    let paramString = Object.keys(param).map(name => {\r\n        let value;\r\n        \r\n        if(isDate(param[name]))\r\n            value = dateToString(param[name]);\r\n        else\r\n            value = param[name];\r\n\r\n        return `${name}=${value}`;\r\n    }).join('&');\r\n\r\n    return '?' + paramString;\r\n}\r\n\r\nconst useAPI = (method, url, params) => {\r\n    const {queryParam, bodyParam, pathParam} = params;\r\n    url += pathParam ? '/' + pathParam : '';\r\n    url += queryParam ? queryParamParser(queryParam) : '';\r\n    \r\n    const fetchOption = {\r\n        method: method,\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json',\r\n        })\r\n    }\r\n\r\n    if (method !== 'GET' && bodyParam) fetchOption['body'] = JSON.stringify(bodyParam);\r\n\r\n    const [result, setResult] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: ''\r\n    });\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const refreshData = () => setRefresh(true);\r\n\r\n    useEffect(() => {\r\n        setResult({\r\n            ...result,\r\n            loading: true\r\n        });\r\n\r\n        fetch( url, fetchOption)\r\n            .then(res => {       \r\n                if (res.ok) {\r\n                    if (res.status !== 204) {\r\n                        return res.json();\r\n                    }\r\n                    else\r\n                        return {\r\n                            success: true\r\n                        }\r\n                }\r\n                else {\r\n                    let errorMsg = '';\r\n\r\n                    if (res.status)\r\n                        errorMsg += `[${res.status}]`;\r\n\r\n                    if (res.statusText)\r\n                        errorMsg += ` ${res.statusText}`;\r\n\r\n                    throw(new Error(errorMsg));\r\n                }\r\n            })\r\n            .then(data => {\r\n                setResult({\r\n                    loading: false,\r\n                    success: true,\r\n                    data\r\n                })\r\n            })\r\n            .catch( json => {\r\n                if( json.status === 'error' ) {\r\n                    throw json;\r\n                }\r\n                \r\n                return {\r\n                    loading: false,\r\n                    success: false,\r\n                    error: json\r\n                }\r\n            });\r\n\r\n        return () => {\r\n            setResult({});\r\n            setRefresh(false);\r\n        }\r\n    }, [refresh]);\r\n\r\n    return [{...result, refreshData}];\r\n}\r\n\r\nexport {\r\n    useAPI\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    background-color: #bdbdbd;\r\n`;\r\n\r\nexport const ChartContainer = styled.div`\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Chart = styled.div`\r\n    margin-top: 10px;\r\n    width: ${(props) => props.width}%;\r\n    background-color: ${(props) => props.color};\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const ChartLabel = styled.div`\r\n    white-space: nowrap;\r\n    color: white;\r\n    font-weight: bold;\r\n    padding: 0 10px;\r\n`;","import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nconst calculateBoundingBoxes = children => {\r\n    const boundingBoxes = {};\r\n\r\n    React.Children.forEach(children, child => {\r\n        const domNode = child.ref.current;\r\n        const nodeBoundingBox = domNode !== null ? domNode.getBoundingClientRect() : undefined;\r\n\r\n        boundingBoxes[child.key] = nodeBoundingBox;\r\n    });\r\n\r\n    return boundingBoxes;\r\n};\r\n\r\nconst usePrevious = value => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]);\r\n\r\n    return ref.current;\r\n}\r\n\r\nconst AnimateElements = ({children, options = {}}) => {\r\n    const [boundingBox, setBoundingBox] = useState({});\r\n    const [prevBoundingBox, setPrevBoundingBox] = useState({});\r\n    const prevChildren = usePrevious(children);\r\n    const {motionDelay = 500} = options;\r\n  \r\n    useEffect(() => {\r\n        const newBoundingBox = calculateBoundingBoxes(children);\r\n        setBoundingBox(newBoundingBox);\r\n    }, [children]);\r\n  \r\n    useEffect(() => {\r\n        const prevBoundingBox = calculateBoundingBoxes(prevChildren);\r\n        setPrevBoundingBox(prevBoundingBox);\r\n    }, [prevChildren]);\r\n\r\n    useEffect(() => {\r\n        const hasPrevBoundingBox = Object.keys(prevBoundingBox).length;\r\n    \r\n        if (hasPrevBoundingBox) {\r\n            React.Children.forEach(children, child => {\r\n                const firstBox = prevBoundingBox[child.key];\r\n                const lastBox = boundingBox[child.key];\r\n\r\n                if (firstBox && lastBox) {\r\n                    const changeInY = firstBox.top - lastBox.top;\r\n    \r\n                    if (changeInY) {\r\n                        const domNode = child.ref.current;\r\n                        \r\n                        requestAnimationFrame(() => {\r\n                            // Before the DOM paints, invert child to old position\r\n                            domNode.style.transform = `translateY(${changeInY}px)`;\r\n                            domNode.style.transition = \"transform 0s\";\r\n                \r\n                            requestAnimationFrame(() => {\r\n                                // After the previous frame, remove\r\n                                // the transistion to play the animation\r\n                                domNode.style.transform = \"\";\r\n                                domNode.style.transition = `transform ${motionDelay}ms`;\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [boundingBox, prevBoundingBox, children]);\r\n  \r\n    return children;\r\n};\r\n\r\nexport default AnimateElements;","import {useState, createRef, useEffect} from 'react';\r\nimport {DateUtil, Util} from '../../util';\r\nimport {Container, ChartContainer, Chart, ChartLabel} from './styles';\r\nimport {DATE_FORMAT_DATA} from '../../constants';\r\nimport AnimateElements from './animate';\r\n\r\nconst {dateAdd, dateToString, stringToDate} = DateUtil;\r\nconst {sortData, formatCurrency} = Util;\r\n\r\nconst AnimateChart = ({data = [], startDate, endDate}) => {\r\n    const [conditions, setConditions] = useState({\r\n        interval: 0.5,\r\n        limit: 20\r\n    });\r\n\r\n    const handleChange = ({target: {name, value}}) => setConditions({\r\n        ...conditions,\r\n        [name]: value\r\n    });\r\n\r\n    const [showDate, setShowDate] = useState(startDate);\r\n    \r\n    const displayData = data.map(item => ({\r\n        id: item.id,\r\n        country: item.country,\r\n        cases: item.cases[showDate] || 0,\r\n        color: item.color\r\n    })).sort(sortData('cases', 'desc')).slice(0, conditions.limit);\r\n\r\n    const maxWidth = displayData.length > 0 ? displayData[0].cases || 1 : 1;\r\n\r\n    const [timer, setTimer] = useState(false);\r\n    const toggleTimer = () => {\r\n        if (showDate !== startDate)\r\n            setShowDate(startDate);\r\n            \r\n        setTimer(!timer);\r\n    }\r\n\r\n    const [repeat, setRepeat] = useState(false);\r\n    const toggleRepeat = () => setRepeat(!repeat);\r\n\r\n    const nextDate = () => {\r\n        if (showDate === endDate)\r\n            if (repeat)\r\n                setShowDate(startDate);\r\n            else\r\n                return true;\r\n        else {\r\n            const d = dateToString(dateAdd(stringToDate(showDate, DATE_FORMAT_DATA), -1), DATE_FORMAT_DATA);\r\n            setShowDate(d);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (timer) {\r\n            const tick = (conditions.interval || 0) * 1000;\r\n            let interval;\r\n\r\n            if (tick > 0) {\r\n                interval = setInterval(() => {\r\n                    const stop = nextDate();\r\n\r\n                    if (stop) {\r\n                        setTimer(false);\r\n                        clearInterval(interval);\r\n                    }\r\n                }, tick);\r\n                    \r\n            }\r\n            \r\n            return () => clearInterval(interval);\r\n        }\r\n    });\r\n\r\n    const intervalOptions = [0.1, 0.3, 0.5, 1, 2, 5];\r\n    const limitOptions = [10, 20, 30, 40, 50]\r\n    let motionDelay = undefined;\r\n\r\n    if (conditions.interval > 0.5)\r\n        motionDelay = 500;\r\n    else\r\n        motionDelay = conditions.interval * 1000;\r\n\r\n    const animateOptions = {\r\n        motionDelay\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showDate\r\n                    ?   <>\r\n                            <div>\r\n                                <label htmlFor=\"limit\">Rows display</label>\r\n                                <select id=\"limit\" name=\"limit\" value={conditions.limit} onChange={handleChange} style={{marginLeft: '5px'}}>\r\n                                    {\r\n                                        limitOptions.map(value => (\r\n                                            <option key={value} value={value}>{value}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n\r\n                                <label htmlFor=\"interval\" style={{marginLeft: '10px'}}>Interval(Second)</label>\r\n                                <select id=\"interval\" name=\"interval\" value={conditions.interval} onChange={handleChange} style={{marginLeft: '5px'}}>\r\n                                    {\r\n                                        intervalOptions.map(value => (\r\n                                            <option key={value} value={value}>{value}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                                <input type=\"checkbox\" id=\"timer\" name=\"timer\" checked={timer} onChange={toggleTimer} style={{marginLeft: '10px'}} />\r\n                                <label htmlFor=\"timer\">Animate</label>\r\n\r\n                                <input type=\"checkbox\" id=\"repeat\" name=\"repeat\" checked={repeat} onChange={toggleRepeat} style={{marginLeft: '10px'}} />\r\n                                <label htmlFor=\"repeat\">Repeat</label>\r\n                            </div>\r\n\r\n                            <br/>\r\n\r\n                            <Container>\r\n                                <ChartContainer>\r\n                                    <strong>Date: {dateToString(stringToDate(showDate, 'M/D/YY'), 'DD/MM/YYYY')}</strong>\r\n\r\n                                    <AnimateElements options={animateOptions}>\r\n                                        {\r\n                                            displayData.map(item => {\r\n                                                const {id, country, cases, color} = item;\r\n                                                const percentage = (cases * 100) / maxWidth;\r\n                                                \r\n                                                return (\r\n                                                    <Chart key={id} id={id} width={percentage} color={color} ref={createRef()}>\r\n                                                        <ChartLabel>{`${country} (${formatCurrency(cases, 0)})`}</ChartLabel>\r\n                                                    </Chart>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                    </AnimateElements>\r\n                                </ChartContainer>\r\n                            </Container>\r\n                        </>\r\n\r\n                    :   <div>Not found result</div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AnimateChart;","import {useState, useMemo} from 'react';\r\nimport {API, DateUtil, Util} from '../../util';\r\nimport {DATE_FORMAT_DATA, END_POINTS} from '../../constants';\r\nimport Chart from './chart';\r\n\r\nconst {useAPI} = API;\r\nconst {dateToString, stringToDate} = DateUtil;\r\nconst {sortData} = Util;\r\n\r\nconst randomColor = (brightness = 1) => {\r\n    var rgb = [Math.random() * 256, Math.random() * 256, Math.random() * 256];\r\n    var mix = [brightness * 85, brightness * 85, brightness * 85]; //51 => 255/5\r\n    var mixedrgb = [rgb[0] + mix[0], rgb[1] + mix[1], rgb[2] + mix[2]].map(\r\n      function (x) {\r\n        return Math.round(x / 2.0);\r\n      }\r\n    );\r\n    return \"rgb(\" + mixedrgb.join(\",\") + \")\";\r\n};\r\n\r\n\r\nconst Home = () => {\r\n    const [conditions, setConditions] = useState({\r\n        lastdays: 30\r\n    });\r\n\r\n    const handleChange = ({target: {name, value}}) => setConditions({\r\n        ...conditions,\r\n        [name]: value\r\n    });\r\n\r\n    const url = END_POINTS.HISTORY;\r\n    const [{data: historyData, loading, refreshData: refreshHistory}] = useAPI('get', url, {queryParam: conditions});\r\n    const [displayData, setDisplayData] = useState([]);\r\n\r\n    const search = () => refreshHistory();\r\n\r\n    useMemo(() => {\r\n        const datas = historyData.map((item = {}, idx) => ({\r\n            id: idx + 1,\r\n            country: item.country,\r\n            cases: item.timeline ? item.timeline.cases || {} : {},\r\n            color: randomColor()\r\n        }));\r\n\r\n        setDisplayData(datas);\r\n    }, [historyData]);\r\n    \r\n    const days = displayData && displayData.length > 0 ? Object.keys(displayData[0].cases).map(s => stringToDate(s, DATE_FORMAT_DATA)).sort(sortData('', 'desc')) : [];\r\n    const startDate = days.length > 0 ? dateToString(days[0], DATE_FORMAT_DATA) : undefined;\r\n    const endDate = days.length > 0 ? dateToString(days[days.length-1], DATE_FORMAT_DATA) : undefined;\r\n\r\n    const handleKeypress = e => {\r\n        if (e.charCode === 13) {\r\n            e.preventDefault();\r\n            search();\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div>\r\n                <label htmlFor=\"lastdays\">Lastdays</label>\r\n                <input id=\"lastdays\" name=\"lastdays\" onChange={handleChange} onKeyPress={handleKeypress} value={conditions.lastdays} style={{marginLeft: '5px'}} />\r\n                <button id=\"search\" type=\"button\" onClick={search} style={{marginLeft: '5px', cursor: 'pointer'}}>Search</button>\r\n            </div>\r\n            <br/>\r\n\r\n            {\r\n                loading\r\n                    ?   <p>Loading...</p>\r\n                    :   <Chart data={displayData} startDate={startDate} endDate={endDate} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}